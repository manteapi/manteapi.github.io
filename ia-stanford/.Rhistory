db=data.frame(year=1990:2016,
ratio=c(.23,.27,.32,.37,.22,.26,.29,.15,.40,.28,.14,.09,.24,.18,.29,.51,.13,.17,.25,.13,.21,.29,.25,.2,.15,.12,.12))
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot(data = db)
ggplot(data = db, aes(x = year, y = ratio), geom_bar(stat="identity"))
ggplot(data = db, aes(year,ratio), geom_bar(stat="identity"))
db=data.frame(year=1990:2016,
ratio=c(.23,.27,.32,.37,.22,.26,.29,.15,.40,.28,.14,.09,.24,.18,.29,.51,.13,.17,.25,.13,.21,.29,.25,.2,.15,.12,.12))
library(ggplot2)
ggplot(data = db, aes(year,ratio), geom_bar(stat="identity"))
ggplot(db, aes(year,ratio), geom_bar(stat="identity"))
ggplot(db, aes(year,ratio), geom_bar(stat="identity"));
ggplot(db, aes(year,ratio) + geom_bar(stat="identity"));
ggplot(db, aes(year,ratio) + geom_bar(stat="identity"))
ggplot(db, aes(year,ratio)) + geom_bar(stat="identity"))
ggplot(db, aes(year,ratio)) + geom_bar(stat="identity")
ggplot(db, aes(year,ratio));
geom_bar(stat="identity");
ggplot(db, aes(year,ratio))
geom_bar(stat="identity")
ggplot(db, aes(year,ratio)) + geom_bar(stat="identity")
ggplot(db, aes(year,ratio)) + geom_bar(stat="bin")
ggplot(db, aes(year,ratio)) + geom_bar(stat="identity")
ggplot(db, aes(year,ratio)) + geom_bar(stat="identity") + stat_smooth(method="lm")
ggplot(db, aes(year,ratio)) + geom_bar(stat="identity") + stat_smooth(method="lm", se="false")
ggplot(db, aes(year,ratio)) + geom_bar(stat="identity") + stat_smooth(method = "lm", se = FALSE)
summary(lm(ratio~year, data=db))
ggplot(db) + geom_point()
ggplot(db, aes(year,ration)) + geom_point()
ggplot(data = db, aes(x = year, y = ratio)) + geom_point()
ggplot(data = db, aes(x = year, y = ratio)) + stat_smooth(method = "lm", se = FALSE) + geom_point()
ggplot(data = db, aes(x = year, y = ratio)) + stat_smooth(method = "lm", se = TRUE) + geom_point()
ggplot(data = db, aes(x = year, y = ratio)) + stat_smooth(method = "loess", se = TRUE) + geom_point()
ratio=ts(data = db$ratio, start = 1990, frequency = 1)
View(db)
ts
ratio
ggplot(data = ratio) + geom_line()
plot(ratio, xlim=c(1990,2013))
plot(ratio, xlim=c(1990,2030))
phw=predict(hw, n.ahead=15, predition.interval=TRUE)
hw=HoltWinters(ratio,gamma=FALSE)
phw=predict(hw, n.ahead=15, predition.interval=TRUE)
plot(hw, phw, xlim=c(1990,2030))
plot(phw, xlim=c(1990,2030))
plot(hw, xlim=c(1990,2030))
plot(phw xlim=c(1990,2030))
plot(phw xlim=c(1990,2030))
plot(hw xlim=c(1990,2030))
plot(phw,) xlim=c(1990,2030))
plot(phw, xlim=c(1990,2030))
plot(hw, phw, xlim=c(1990,2030))
phw=predict(hw, n.ahead=15)
plot(hw, phw, xlim=c(1990,2030))
phw=predict(hw, n.ahead=1)
plot(hw, phw, xlim=c(1990,2030))
phw=predict(hw, n.ahead=15)
plot(hw, phw, xlim=c(1990,2030))
polygon(c(2017:2031, rev(2017:2031)))
rev(2017:2031)
phw
polygon(c(2017:2031, rev(2017:2031)), c(phw[,2], rev(phw[,3])))
polygon(c(2017:2031, rev(2017:2031)), c(phw[,2],rev(phw[,3])), border=NA)
polygon(c(2017:2031,rev(2017:2031)), c(phw[,2],rev(phw[,3])),border=NA,col=rgb(0,0,1,.2))
phw=predict(hw, n.ahead=15)
plot(hw, phw, xlim=c(1990,2030))
polygon(c(2017:2031,rev(2017:2031)), c(phw[,2],rev(phw[,3])),border=NA,col=rgb(0,0,1,.2))
ratio=ts(data = db$ratio, start = 1990, frequency = 1)
plot(ratio, xlim=c(1990,2030))
hw=HoltWinters(ratio,gamma=FALSE)
phw=predict(hw, n.ahead=15)
plot(hw, phw, xlim=c(1990,2030))
polygon(c(2017:2031,rev(2017:2031)), c(phw[,2],rev(phw[,3])),border=NA,col=rgb(0,0,1,.2))
ratio=ts(data = db$ratio, start = 1990, frequency = 1)
plot(ratio, xlim=c(1990,2030))
hw=HoltWinters(ratio,gamma=FALSE)
phw=predict(hw, n.ahead=15,prediction.interval = TRUE)
plot(hw, phw, xlim=c(1990,2030))
polygon(c(2017:2031,rev(2017:2031)), c(phw[,2],rev(phw[,3])),border=NA,col=rgb(0,0,1,.2))
ratio=ts(data = db$ratio, start = 1990, frequency = 1)
plot(ratio, xlim=c(1990,2030))
hw=HoltWinters(ratio,gamma=FALSE)
phw=predict(hw, n.ahead=15,prediction.interval = TRUE)
plot(hw, phw, xlim=c(1990,2030))
phw
polygon(c(2017:2031,rev(2017:2031)), c(phw[,2],rev(phw[,3])),border=NA,col=rgb(0,0,1,.2))
installed.packages("markdown")
install.packages("markdown")
source('~/Documents/accident-corporels.R')
---
title: "Freakonometric - 2/01/2017 - Playground"
output: html_document
---
db=data.frame(year=1990:2016,
ratio=c(.23,.27,.32,.37,.22,.26,.29,.15,.40,.28,.14,.09,.24,.18,.29,.51,.13,.17,.25,.13,.21,.29,.25,.2,.15,.12,.12))
library(ggplot2)
#Bar plots
#stat_smooth : lm = linear model, se = confidence band
ggplot(data = db, aes(x = year,y = ratio)) + geom_bar(stat="identity") + stat_smooth(method = "lm", se = TRUE)
#Linear regression summary
summary(lm(ratio~year, data=db))
#Point plots
ggplot(data = db, aes(x = year, y = ratio)) + stat_smooth(method = "lm", se = TRUE) + geom_point()
#Non-linear regression - Local polynomial regression fit
ggplot(data = db, aes(x = year, y = ratio)) + stat_smooth(method = "loess", se = TRUE) + geom_point()
#ts function will convert a numeric vector into an R time series object
ratio=ts(data = db$ratio, start = 1990, frequency = 1)
plot(ratio, xlim=c(1990,2030))
#exponential smoothing model
hw=HoltWinters(ratio,gamma=FALSE)
#prediction
phw=predict(hw, n.ahead=15,prediction.interval = TRUE)
#plot
plot(hw, phw, xlim=c(1990,2030))
polygon(c(2017:2031,rev(2017:2031)), c(phw[,2],rev(phw[,3])),border=NA,col=rgb(0,0,1,.2))
library(rmarkdown)
---
title: "Freakonometric - 2/01/2017 - Playground"
output: html_document
---
library(rmarkdown)
db=data.frame(year=1990:2016,
ratio=c(.23,.27,.32,.37,.22,.26,.29,.15,.40,.28,.14,.09,.24,.18,.29,.51,.13,.17,.25,.13,.21,.29,.25,.2,.15,.12,.12))
library(ggplot2)
###Bar plots and linear smoothing with confidence band
#stat_smooth : lm = linear model, se = confidence band
ggplot(data = db, aes(x = year,y = ratio)) + geom_bar(stat="identity") + stat_smooth(method = "lm", se = TRUE)
###Regression model summary
summary(lm(ratio~year, data=db))
###Point plots
ggplot(data = db, aes(x = year, y = ratio)) + stat_smooth(method = "lm", se = TRUE) + geom_point()
###Non-linear regression - Local polynomial regression fit
ggplot(data = db, aes(x = year, y = ratio)) + stat_smooth(method = "loess", se = TRUE) + geom_point()
###Times series and Exponential smoothing
ts function will convert a numeric vector into an R time series object
ratio=ts(data = db$ratio, start = 1990, frequency = 1)
plot(ratio, xlim=c(1990,2030))
#exponential smoothing model
hw=HoltWinters(ratio,gamma=FALSE)
#prediction
phw=predict(hw, n.ahead=15,prediction.interval = TRUE)
#plot
plot(hw, phw, xlim=c(1990,2030))
polygon(c(2017:2031,rev(2017:2031)), c(phw[,2],rev(phw[,3])),border=NA,col=rgb(0,0,1,.2))
---
title: "Freakonometric - 2/01/2017 - Playground"
output: html_document
---
library(rmarkdown)
db=data.frame(year=1990:2016,
ratio=c(.23,.27,.32,.37,.22,.26,.29,.15,.40,.28,.14,.09,.24,.18,.29,.51,.13,.17,.25,.13,.21,.29,.25,.2,.15,.12,.12))
library(ggplot2)
###Bar plots and linear smoothing with confidence band
#stat_smooth : lm = linear model, se = confidence band
ggplot(data = db, aes(x = year,y = ratio)) + geom_bar(stat="identity") + stat_smooth(method = "lm", se = TRUE)
###Regression model summary
summary(lm(ratio~year, data=db))
###Point plots
ggplot(data = db, aes(x = year, y = ratio)) + stat_smooth(method = "lm", se = TRUE) + geom_point()
###Non-linear regression - Local polynomial regression fit
ggplot(data = db, aes(x = year, y = ratio)) + stat_smooth(method = "loess", se = TRUE) + geom_point()
###Times series and Exponential smoothing
#ts function will convert a numeric vector into an R time series object
ratio=ts(data = db$ratio, start = 1990, frequency = 1)
plot(ratio, xlim=c(1990,2030))
#exponential smoothing model
hw=HoltWinters(ratio,gamma=FALSE)
#prediction
phw=predict(hw, n.ahead=15,prediction.interval = TRUE)
#plot
plot(hw, phw, xlim=c(1990,2030))
polygon(c(2017:2031,rev(2017:2031)), c(phw[,2],rev(phw[,3])),border=NA,col=rgb(0,0,1,.2))
install.packages(rmarkdown)
library("rmarkdown")
install.packages("rmarkdown")
library("rmarkdown")
---
title: "Freakonometric - 2/01/2017 - Playground"
output: html_document
---
install.packages("rmarkdown")
library("rmarkdown")
db=data.frame(year=1990:2016,
ratio=c(.23,.27,.32,.37,.22,.26,.29,.15,.40,.28,.14,.09,.24,.18,.29,.51,.13,.17,.25,.13,.21,.29,.25,.2,.15,.12,.12))
library(ggplot2)
###Bar plots and linear smoothing with confidence band
#stat_smooth : lm = linear model, se = confidence band
ggplot(data = db, aes(x = year,y = ratio)) + geom_bar(stat="identity") + stat_smooth(method = "lm", se = TRUE)
###Regression model summary
summary(lm(ratio~year, data=db))
###Point plots
ggplot(data = db, aes(x = year, y = ratio)) + stat_smooth(method = "lm", se = TRUE) + geom_point()
###Non-linear regression - Local polynomial regression fit
ggplot(data = db, aes(x = year, y = ratio)) + stat_smooth(method = "loess", se = TRUE) + geom_point()
###Times series and Exponential smoothing
#ts function will convert a numeric vector into an R time series object
ratio=ts(data = db$ratio, start = 1990, frequency = 1)
plot(ratio, xlim=c(1990,2030))
#exponential smoothing model
hw=HoltWinters(ratio,gamma=FALSE)
#prediction
phw=predict(hw, n.ahead=15,prediction.interval = TRUE)
#plot
plot(hw, phw, xlim=c(1990,2030))
polygon(c(2017:2031,rev(2017:2031)), c(phw[,2],rev(phw[,3])),border=NA,col=rgb(0,0,1,.2))
install.packages("rmarkdown")
db=data.frame(year=1990:2016,
ratio=c(.23,.27,.32,.37,.22,.26,.29,.15,.40,.28,.14,.09,.24,.18,.29,.51,.13,.17,.25,.13,.21,.29,.25,.2,.15,.12,.12))
db=data.frame(year=1990:2016,
ratio=c(.23,.27,.32,.37,.22,.26,.29,.15,.40,.28,.14,.09,.24,.18,.29,.51,.13,.17,.25,.13,.21,.29,.25,.2,.15,.12,.12))
ggplot(data = db, aes(x = year,y = ratio)) + geom_bar(stat="identity") + stat_smooth(method = "lm", se = TRUE)
library(ggplot2)
---
title: "Freakonometric - 2/01/2017 - Playground"
output: html_document
---
```{r include=FALSE}
library(ggplot2)
```
```{r}
db=data.frame(year=1990:2016,
ratio=c(.23,.27,.32,.37,.22,.26,.29,.15,.40,.28,.14,.09,.24,.18,.29,.51,.13,.17,.25,.13,.21,.29,.25,.2,.15,.12,.12))
```
###Bar plots and linear smoothing with confidence band
#stat_smooth : lm = linear model, se = confidence band
```{r}
ggplot(data = db, aes(x = year,y = ratio)) + geom_bar(stat="identity") + stat_smooth(method = "lm", se = TRUE)
```
###Regression model summary
summary(lm(ratio~year, data=db))
###Point plots
ggplot(data = db, aes(x = year, y = ratio)) + stat_smooth(method = "lm", se = TRUE) + geom_point()
###Non-linear regression - Local polynomial regression fit
ggplot(data = db, aes(x = year, y = ratio)) + stat_smooth(method = "loess", se = TRUE) + geom_point()
###Times series and Exponential smoothing
#ts function will convert a numeric vector into an R time series object
ratio=ts(data = db$ratio, start = 1990, frequency = 1)
plot(ratio, xlim=c(1990,2030))
#exponential smoothing model
hw=HoltWinters(ratio,gamma=FALSE)
#prediction
phw=predict(hw, n.ahead=15,prediction.interval = TRUE)
#plot
plot(hw, phw, xlim=c(1990,2030))
polygon(c(2017:2031,rev(2017:2031)), c(phw[,2],rev(phw[,3])),border=NA,col=rgb(0,0,1,.2))
---
title: "Freakonometric - 2/01/2017 - Playground"
output: html_document
---
```{r include=FALSE}
library(ggplot2)
```
```{r}
db=data.frame(year=1990:2016,
ratio=c(.23,.27,.32,.37,.22,.26,.29,.15,.40,.28,.14,.09,.24,.18,.29,.51,.13,.17,.25,.13,.21,.29,.25,.2,.15,.12,.12))
```
###Bar plots and linear smoothing with confidence band
#stat_smooth : lm = linear model, se = confidence band
```{r}
ggplot(data = db, aes(x = year,y = ratio)) + geom_bar(stat="identity") + stat_smooth(method = "lm", se = TRUE)
```
###Regression model summary
```{r}
summary(lm(ratio~year, data=db))
```
###Point plots
```{r}
ggplot(data = db, aes(x = year, y = ratio)) + stat_smooth(method = "lm", se = TRUE) + geom_point()
```
###Non-linear regression - Local polynomial regression fit
```{r}
ggplot(data = db, aes(x = year, y = ratio)) + stat_smooth(method = "loess", se = TRUE) + geom_point()
```
###Times series and Exponential smoothing
#ts function will convert a numeric vector into an R time series object
```{r}
ratio=ts(data = db$ratio, start = 1990, frequency = 1)
plot(ratio, xlim=c(1990,2030))
#exponential smoothing model
hw=HoltWinters(ratio,gamma=FALSE)
#prediction
phw=predict(hw, n.ahead=15,prediction.interval = TRUE)
#plot
plot(hw, phw, xlim=c(1990,2030))
polygon(c(2017:2031,rev(2017:2031)), c(phw[,2],rev(phw[,3])),border=NA,col=rgb(0,0,1,.2))
```
clear
clf
---
title: "Freakonometric - 2/01/2017 - Playground"
output: html_document
---
library(rmarkdown)
library("rmarkdown")
---
title: "Freakonometric - 2/01/2017 - Playground"
output: html_document
---
---
title: "Viridis Demo"
output: html_document
---
---
title: "Freakonometric - 2/01/2017 - Playground"
output: html_document
---
render("naturalDisaster.Rmd")
render("~/Téléchargements/naturalDisaster.Rmd")
render("~/Documents/naturalDisaster.Rmd")
```{r include=FALSE}
```{r include = FALSE}
library("rmarkdown")
library("rmarkdown")
```{r include = FALSE}
---
title: "Freakonometric - 2/01/2017 - Playground"
output: html_document
---
```{r include = FALSE}
library("rmarkdown")
library(ggplot2)
```
###Data - Global Weather-related Disaster Loss as Proportion of the Global Gross Domestic Product
```{r}
db=data.frame(year=1990:2016,
ratio=c(.23,.27,.32,.37,.22,.26,.29,.15,.40,.28,.14,.09,.24,.18,.29,.51,.13,.17,.25,.13,.21,.29,.25,.2,.15,.12,.12))
```
###Bar plots and linear smoothing with confidence band
```{r}
#stat_smooth : lm = linear model, se = confidence band
ggplot(data = db, aes(x = year,y = ratio)) + geom_bar(stat="identity") + stat_smooth(method = "lm", se = TRUE)
```
```{r}
###Regression model summary
summary(lm(ratio~year, data=db))
```
```{r}
###Point plots
ggplot(data = db, aes(x = year, y = ratio)) + stat_smooth(method = "lm", se = TRUE) + geom_point()
```
###Non-linear regression - Local polynomial regression fit
```{r}
ggplot(data = db, aes(x = year, y = ratio)) + stat_smooth(method = "loess", se = TRUE) + geom_point()
```
###Times series and Exponential smoothing
```{r}
#ts function will convert a numeric vector into an R time series object
ratio=ts(data = db$ratio, start = 1990, frequency = 1)
plot(ratio, xlim=c(1990,2030))
#exponential smoothing model
hw=HoltWinters(ratio,gamma=FALSE)
#prediction
phw=predict(hw, n.ahead=15,prediction.interval = TRUE)
#plot
plot(hw, phw, xlim=c(1990,2030))
polygon(c(2017:2031,rev(2017:2031)), c(phw[,2],rev(phw[,3])),border=NA,col=rgb(0,0,1,.2))
```
```{r include=FALSE}
render("~/Documents/naturalDisaster.Rmd")
```
library("ggplot2")
```{r include = FALSE}
library("rmarkdown")
library("ggplot2")
---
title: "Freakonometric - 2/01/2017 - Playground"
output: html_document
---
```{r}
library("rmarkdown")
library("ggplot2")
```
###Data - Global Weather-related Disaster Loss as Proportion of the Global Gross Domestic Product
```{r}
db=data.frame(year=1990:2016,
ratio=c(.23,.27,.32,.37,.22,.26,.29,.15,.40,.28,.14,.09,.24,.18,.29,.51,.13,.17,.25,.13,.21,.29,.25,.2,.15,.12,.12))
```
###Bar plots and linear smoothing with confidence band
```{r}
#stat_smooth : lm = linear model, se = confidence band
ggplot(data = db, aes(x = year,y = ratio)) + geom_bar(stat="identity") + stat_smooth(method = "lm", se = TRUE)
```
```{r}
###Regression model summary
summary(lm(ratio~year, data=db))
```
```{r}
###Point plots
ggplot(data = db, aes(x = year, y = ratio)) + stat_smooth(method = "lm", se = TRUE) + geom_point()
```
###Non-linear regression - Local polynomial regression fit
```{r}
ggplot(data = db, aes(x = year, y = ratio)) + stat_smooth(method = "loess", se = TRUE) + geom_point()
```
###Times series and Exponential smoothing
```{r}
#ts function will convert a numeric vector into an R time series object
ratio=ts(data = db$ratio, start = 1990, frequency = 1)
plot(ratio, xlim=c(1990,2030))
#exponential smoothing model
hw=HoltWinters(ratio,gamma=FALSE)
#prediction
phw=predict(hw, n.ahead=15,prediction.interval = TRUE)
#plot
plot(hw, phw, xlim=c(1990,2030))
polygon(c(2017:2031,rev(2017:2031)), c(phw[,2],rev(phw[,3])),border=NA,col=rgb(0,0,1,.2))
```
```{r include=FALSE}
render("~/Documents/naturalDisaster.Rmd")
```
---
title: "Freakonometric - 2/01/2017 - Playground"
output: html_document
---
---
```{r}
render("~/Documents/naturalDisaster.Rmd")
render("~/Documents/naturalDisaster.Rmd")
render("~/Documents/naturalDisaster.Rmd")
render("~/Documents/naturalDisaster.Rmd")
```{r include = FALSE}
knitr::opts_chunk$set(echo = TRUE)
---
title: "cs221_stanford_ia_lecture1_notes"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
render("cs221_stanford_ia_lecture1_notes.Rmd")
library(rmarkdown)
render("cs221_stanford_ia_lecture1_notes.Rmd")
setwd(~/home/Depot/github/manteapi.github.io/ia-stanford)
setwd(~/Depot/github/manteapi.github.io/ia-stanford)
setwd("~/Depot/github/manteapi.github.io/ia-stanford")
render("cs221_stanford_ia_lecture1_notes.Rmd")
render("cs221_stanford_ia_lecture1_notes.Rmd")
render("cs221_stanford_ia_lecture1_notes.Rmd")
render("cs221_stanford_ia_lecture1_notes.Rmd")
render("cs221_stanford_ia_lecture1_notes.Rmd")
render("cs221_stanford_ia_lecture1_notes.Rmd")
render("cs221_stanford_ia_lecture1_notes.Rmd")
